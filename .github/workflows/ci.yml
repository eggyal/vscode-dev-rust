name: CI
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2.4.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25 # renovate: tag=v1.6.0

      - name: Determine effective user and group
        id: effective-user
        run: |
          echo "::set-output name=uid::$(id -u)"
          echo "::set-output name=gid::$(id -g)"

      # Build "base" in order to load its image into Docker from the buildx
      # cache, so that the update script can then be run upon it.
      - name: Build base
        id: base
        uses: docker/build-push-action@a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229 # renovate: tag=v2.7.0
        with:
          context: .devcontainer
          build-args: |
            USER_UID=${{ steps.effective-user.outputs.uid }}
            USER_GID=${{ steps.effective-user.outputs.gid }}
          target: base
          tags: base
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
          load: true

      # Run the update script on pull requests and pushes to main in order to
      # confirm that it has not been broken; only `schedule` events will use the
      # results (opening a PR, if there are updates)--all else will discard it
      # in the `Reset` step.
      - name: Determine Updates
        run: docker run -v ${{ github.workspace }}:/workspace base /workspace/.devcontainer/update.sh

      - name: Generate GitHub token
        if: ${{ github.event_name == 'schedule' }}
        uses: tibdex/github-app-token@cdb5bfda87db263e4be5c6f570c4c39611ee952a # renovate: tag=v1.4.0
        id: generate-token
        with:
          app_id: ${{ secrets.PR_APP_ID }}
          private_key: ${{ secrets.PR_PRIVATE_KEY }}

      - name: Create Pull Request
        if: ${{ github.event_name == 'schedule' }}
        uses: peter-evans/create-pull-request@67df31e08a133c6a77008b89689677067fef169e # renovate: tag=v3.11.0
        with:
          token: ${{ steps.generate-token.outputs.token }}
          branch: update-mold
          delete-branch: true
          title: 'Update mold'

      - name: Reset
        if: ${{ github.event_name != 'schedule' }}
        run: git reset --hard ${{ github.sha }}

      - name: Login to DockerHub
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9 # renovate: tag=v1.10.0
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build (and, if a release, push to Docker Hub)
        if: ${{ github.event_name != 'schedule' }}
        id: build
        uses: docker/build-push-action@a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229 # renovate: tag=v2.7.0
        with:
          context: .devcontainer
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
          tags: ${{ github.repository }}:1-bullseye
          push: ${{ github.event_name == 'push' }}
